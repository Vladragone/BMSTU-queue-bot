# bot.py
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from dotenv import load_dotenv
import os

from config import QUEUE_LIFETIME_HOURS
from queues import QueueManager
from scheduler import setup_scheduler


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
queues = QueueManager()


# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def announce_queue(chat_id: int, subjects: list[str]):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    queues.open(subjects)
    msg = await bot.send_message(chat_id, queues.format_text(), parse_mode="Markdown")
    queues.message_id = msg.message_id

    asyncio.create_task(close_queue(chat_id, delay=QUEUE_LIFETIME_HOURS * 3600))


async def update_message():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é"""
    if queues.message_id:
        await bot.edit_message_text(
            chat_id=CHAT_ID,
            message_id=queues.message_id,
            text=queues.format_text(),
            parse_mode="Markdown"
        )


async def close_queue(chat_id: int, delay: int):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ø–æ —Ç–∞–π–º–µ—Ä—É"""
    await asyncio.sleep(delay)
    queues.close()
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=queues.message_id,
        text="‚ùå –û—á–µ—Ä–µ–¥—å –∑–∞–∫—Ä—ã—Ç–∞!\n\n" + queues.format_text(),
        parse_mode="Markdown"
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
@dp.message(F.text.regexp(r"^!"))
async def handle_signup(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (!–≤–µ–±, !—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)"""
    if not queues.active:
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    subject = message.text.lstrip("!").strip().lower()
    user_name = message.from_user.full_name.strip()

    # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    active_subjects_lower = [s.lower() for s in queues.active_subjects]

    if subject not in active_subjects_lower:
        await message.delete()
        return

    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞
    original_subject = queues.active_subjects[active_subjects_lower.index(subject)]

    if queues.add_user(original_subject, user_name):
        await update_message()
        await message.delete()
        await bot.send_message(
            CHAT_ID,
            f"üë§ {user_name} –∑–∞–Ω—è–ª(–∞) –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ *{original_subject}*.",
            parse_mode="Markdown"
        )
    else:
        await message.delete()
        await message.answer(
            f"‚ö†Ô∏è {user_name}, –≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {original_subject}.",
            reply=False
        )


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞"""
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—á–µ—Ä–µ–¥–∏ –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
async def main():
    setup_scheduler(announce_queue, CHAT_ID)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
